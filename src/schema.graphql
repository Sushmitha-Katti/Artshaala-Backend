# import * from './generated/prisma.graphql'

type SuccessMessage {
  message: String
}
enum Status {
  DELIVERED
  PENDING
}
enum Mode {
  OFFLINE
  ONLINE
}

type Mutation {
  createItem(discountPrice: Float, discount: Int,title: String!,description: String, specification: String!, category: String ,brand:String, type: String, price: Int!,stock:Int, size:String, images: [String] ): Item!
  
  updateItem(id: ID!, title: String,description: String, specification: String, category: String ,brand:String, type: String, price: Int,stock:Int, size:String,discount:Int): Item!
  deleteItem(id: ID!): Item
  deleteOrder(id: ID!): Order
  updateAddress(id: ID!,mobile:String,pincode:String, addressline1:String!, addressline2:String, landmark:String, city: String!, state:String!): Address
  createaAddress(mobile:String,pincode:String, addressline1:String!, addressline2:String, landmark:String, city: String!, state:String!): Address!
  signup(email: String!, password: String!, name: String!): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
  updatePermissions(permissions: [Permission], userId: ID!): User
  addToCart(id: ID!): CartItem
  updateCart(id:ID!, quantity: Int): CartItem 
  removeFromCart(id: ID!): CartItem
  createOrder(paymentId: String, mode:String!): Order!
  createComment(comment: String, rating: Float!,itemid: ID!): Comment!
  createBlog(title: String!, author: String!, summery: String!, image: String!, headers:String!, description: String!): Blog!
  deleteBlog(id: ID!): Blog
  createNewsletter(email:String!): Newsletter!
  createContact(email:String!, name:String!, phone: String!, message: String!, subject: String!): Contact!
  updateContact(id: ID!, status: ContactStatus): Contact!
  updateorder(id:ID!, status:Status): Order!
}

type Query {
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, first: Int): [Item]!
  item(where: ItemWhereUniqueInput!): Item
  itemsConnection(where: ItemWhereInput): ItemConnection!
  me: User
  users: [User]!
  order(id: ID!): Order
  orders(orderBy: OrderOrderByInput,where:OrderWhereInput): [Order]!
  comments(where: CommentWhereInput):[Comment]
  commentsConnection(where: CommentWhereInput,orderBy: CommentOrderByInput,skip: Int,after: String,before: String,first: Int,last: Int):CommentConnection!
  blogs(orderBy: BlogOrderByInput): [Blog]!
  blog(id: ID!): Blog
  newsletters(where: NewsletterWhereInput): [Newsletter]
  contacts(orderBy: ContactOrderByInput) :[Contact]
  address(where: AddressWhereUniqueInput!): Address
  addresses(where: AddressWhereInput): [Address]
  adminorders(orderBy: OrderOrderByInput,where:OrderWhereInput): [Order]!
  
}

type User{
  id: ID!
  name: String!
  email: String!
  permissions: [Permission!]!
  cart: [CartItem!]!
  orders: [OrderItem]
  address:Address
}
